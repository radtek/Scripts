define owner=&owner
define table_name=&table_name

col OWNER for a20
col TABLE_NAME for a30 
col INDEX_NAME for a30 
col INDEX_TYPE for a15
col UNIQUENESS for a15
col COMPRESSION for a15
col TABLESPACE_NAME for a30
col STATUS for a15
col DEGREE for a15
col PARTITIONED for a15
col COLUMNS	 for a200

DECLARE
	V_COL number := NULL;
BEGIN 
	BEGIN 
		SELECT 1 AS COL INTO V_COL FROM DBA_OBJECTS WHERE OWNER = 'SYSTEM' AND OBJECT_NAME = 'TEMP_INDEX_FUNC' AND ROWNUM = 1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_COL := 0;
	END;
	
	IF V_COL = 1 THEN
	    EXECUTE IMMEDIATE 'DROP TABLE SYSTEM.TEMP_INDEX_FUNC';
	END IF;
	
	EXECUTE IMMEDIATE ' CREATE GLOBAL TEMPORARY TABLE SYSTEM.TEMP_INDEX_FUNC(INDEX_NAME varchar2(100), INDEX_OWNER varchar2(100), COLUMN_POSITION number, COLUMN_EXPRESSION varchar2(100)) ON COMMIT DELETE ROWS';	
END;
/
		
DECLARE 
	V_INDEX_NAME varchar2(100);
	V_INDEX_OWNER varchar2(100);
	V_COLUMN_POSITION varchar2(100);
	V_COLUMN_EXPRESSION varchar2(100);	
	CURSOR CR  IS SELECT IND.INDEX_NAME, IND.INDEX_OWNER, IEXP.COLUMN_POSITION, IEXP.COLUMN_EXPRESSION
				FROM DBA_IND_COLUMNS IND				 				 					
				 INNER JOIN DBA_IND_EXPRESSIONS IEXP
					ON IEXP.INDEX_NAME = IND.INDEX_NAME
					AND IEXP.INDEX_OWNER = IND.INDEX_OWNER
					AND IEXP.COLUMN_POSITION = IND.COLUMN_POSITION
				   WHERE IND.TABLE_OWNER = upper('&owner')
					AND IND.TABLE_NAME = upper('&table_name');
BEGIN 
	execute immediate 'TRUNCATE TABLE SYSTEM.TEMP_INDEX_FUNC';
	OPEN CR;
			
	LOOP 							
		FETCH CR INTO V_INDEX_NAME, V_INDEX_OWNER, V_COLUMN_POSITION, V_COLUMN_EXPRESSION;
		EXIT WHEN CR%NOTFOUND;
		
		INSERT INTO SYSTEM.TEMP_INDEX_FUNC(INDEX_NAME, INDEX_OWNER, COLUMN_POSITION, COLUMN_EXPRESSION)
		VALUES(V_INDEX_NAME, V_INDEX_OWNER, V_COLUMN_POSITION, V_COLUMN_EXPRESSION);
	END LOOP;
	
	CLOSE CR;
END;
	/
Prompt 
Prompt 
Prompt ******************** Indices disponiveis para &owner"."&table_name	******************** 
Prompt 
SELECT 
	 IND.INDEX_NAME,
	 IND.INDEX_TYPE,
	 IND.UNIQUENESS,
	 "1" || 
	 DECODE("2", '', '', ',' || "2") ||
	 DECODE("3", '', '', ',' || "3") ||
	 DECODE("4", '', '', ',' || "4") ||
	 DECODE("5", '', '', ',' || "5") ||
	 DECODE("6", '', '', ',' || "6") ||
	 DECODE("7", '', '', ',' || "7") ||
	 DECODE("8", '', '', ',' || "8") ||
	 DECODE("9", '', '', ',' || "9") ||
	 DECODE("10", '', '', ',' || "10") ||
	 DECODE("11", '', '', ',' || "11") ||
	 DECODE("11", '', '', ',' || "12") ||
	 DECODE("11", '', '', ',' || "13") ||
	 DECODE("11", '', '', ',' || "14") ||
	 DECODE("11", '', '', ',' || "15") ||
	 DECODE("11", '', '', ',' || "16") ||
	 DECODE("11", '', '', ',' || "17") ||
	 DECODE("11", '', '', ',' || "18") ||
	 DECODE("11", '', '', ',' || "19") ||
	 DECODE("12", '', '', ',' || "20") as COLUMNS,
	 IND.COMPRESSION,
	 IND.TABLESPACE_NAME,
	 IND.STATUS,
	 IND.DEGREE,
	 IND.PARTITIONED	 
FROM (	SELECT IND.TABLE_NAME, 
			 IND.INDEX_OWNER, 
			 IND.INDEX_NAME,
			MAX(CASE  IND.COLUMN_POSITION WHEN 1 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "1",
			MAX(CASE  IND.COLUMN_POSITION WHEN 2 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "2",
			MAX(CASE  IND.COLUMN_POSITION WHEN 3 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "3",
			MAX(CASE  IND.COLUMN_POSITION WHEN 4 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "4",
			MAX(CASE  IND.COLUMN_POSITION WHEN 5 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "5",
			MAX(CASE  IND.COLUMN_POSITION WHEN 6 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "6",
			MAX(CASE  IND.COLUMN_POSITION WHEN 7 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "7",
			MAX(CASE  IND.COLUMN_POSITION WHEN 8 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "8",
			MAX(CASE  IND.COLUMN_POSITION WHEN 9 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "9",
			MAX(CASE  IND.COLUMN_POSITION WHEN 10 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "10",
			MAX(CASE  IND.COLUMN_POSITION WHEN 11 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "11",
			MAX(CASE  IND.COLUMN_POSITION WHEN 12 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "12",
			MAX(CASE  IND.COLUMN_POSITION WHEN 13 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "13",
			MAX(CASE  IND.COLUMN_POSITION WHEN 14 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "14",
			MAX(CASE  IND.COLUMN_POSITION WHEN 15 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "15",
			MAX(CASE  IND.COLUMN_POSITION WHEN 16 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "16",
			MAX(CASE  IND.COLUMN_POSITION WHEN 17 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "17",
			MAX(CASE  IND.COLUMN_POSITION WHEN 18 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "18",
			MAX(CASE  IND.COLUMN_POSITION WHEN 19 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "19",
			MAX(CASE  IND.COLUMN_POSITION WHEN 20 THEN NVL(IEXP.COLUMN_EXPRESSION, IND.COLUMN_NAME) ELSE '' END) AS "20"
		FROM DBA_IND_COLUMNS IND				 										
			LEFT JOIN SYSTEM.TEMP_INDEX_FUNC IEXP
				ON IEXP.INDEX_NAME = IND.INDEX_NAME
				AND IEXP.INDEX_OWNER = IND.INDEX_OWNER
				AND IEXP.COLUMN_POSITION = IND.COLUMN_POSITION
		WHERE 
			IND.TABLE_OWNER = upper('&owner')
			AND IND.TABLE_NAME = upper('&table_name')
		GROUP BY IND.TABLE_NAME, 
			 IND.INDEX_OWNER, 
			 IND.INDEX_NAME )  TBL
	INNER JOIN DBA_INDEXES IND
		ON IND.INDEX_NAME = TBL.INDEX_NAME
		AND IND.TABLE_NAME =TBL.TABLE_NAME
		AND IND.OWNER = TBL.INDEX_OWNER
ORDER BY IND.INDEX_NAME;	
		 
DROP TABLE SYSTEM.TEMP_INDEX_FUNC;
	
	
undefine owner
undefine table_name